generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model artiststyles {
  id       Int     @id @default(autoincrement())
  artistId Int
  styleId  Int
  users    artists @relation(fields: [artistId], references: [artistId], onDelete: NoAction, onUpdate: NoAction, map: "artiststyles_ibfk_1")
  styles   styles  @relation(fields: [styleId], references: [styleId], onDelete: NoAction, onUpdate: NoAction, map: "artiststyles_ibfk_2")

  @@index([artistId], map: "artistId")
  @@index([styleId], map: "styleId")
}

model bookings {
  bookingId                      Int              @id @default(autoincrement())
  userId                         Int
  artistId                       Int
  statusId                       Int
  createdAt                      DateTime?        @default(now()) @db.DateTime(0)
  comment                        String?          @db.Text
  price                          Decimal?         @db.Decimal(10, 2)
  isColor                        Boolean?         @default(false)
  commissionAmount               Decimal?         @db.Decimal(10, 2)
  placementId                    Int?
  referenceURL                   String?          @db.VarChar(255)
  slotId                         Int
  sizeId                         Int?
  users_bookings_userIdTousers   users            @relation("bookings_userIdTousers", fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_1")
  users_bookings_artistIdTousers artists          @relation("bookings_artistIdTousers", fields: [artistId], references: [artistId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_2")
  appointmentslots               appointmentslots @relation(fields: [slotId], references: [slotId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_3")
  bookingstatuses                bookingstatuses  @relation(fields: [statusId], references: [statusId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_4")
  placements                     placements?      @relation(fields: [placementId], references: [placementId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_5")
  sizes                          sizes?           @relation(fields: [sizeId], references: [sizeId], onDelete: NoAction, onUpdate: NoAction, map: "bookings_ibfk_6")
  reviews                        reviews[]

  @@index([artistId], map: "artistId")
  @@index([statusId], map: "statusId")
  @@index([userId], map: "userId")
  @@index([placementId], map: "placementId")
  @@index([slotId], map: "slotId")
  @@index([sizeId], map: "sizeId")
}

model bookingstatuses {
  statusId Int        @id @default(autoincrement())
  status   String     @db.VarChar(50)
  bookings bookings[]
}

model cities {
  cityId      Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  countryName String    @db.VarChar(100)
  artists     artists[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  reviewId  Int       @id @default(autoincrement())
  userId    Int
  bookingId Int
  createdAt DateTime? @default(now()) @db.DateTime(0)
  rating    Int?      @db.TinyInt
  comment   String?   @db.Text
  users     users     @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")
  bookings  bookings  @relation(fields: [bookingId], references: [bookingId], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_2")

  @@index([bookingId], map: "bookingId")
}

model styles {
  styleId      Int            @id @default(autoincrement())
  styleName    String         @db.VarChar(100)
  description  String?        @db.Text
  artiststyles artiststyles[]
  tattoostyles tattoostyles[]
}

model tattoos {
  tattooId     Int            @id @default(autoincrement())
  artistId     Int
  tattooName   String?        @db.VarChar(100)
  imageURL     String?        @db.VarChar(255)
  favorites    favorites[]
  users        artists        @relation(fields: [artistId], references: [artistId], onDelete: NoAction, onUpdate: NoAction, map: "tattoos_ibfk_1")
  tattoostyles tattoostyles[]

  @@index([artistId], map: "artistId")
}

model users {
  userId                          Int         @id @default(autoincrement())
  email                           String      @unique(map: "email") @db.VarChar(255)
  phoneNumber                     String?     @db.VarChar(30)
  firstName                       String      @db.VarChar(100)
  lastName                        String      @db.VarChar(100)
  birthDate                       DateTime    @db.Date
  password                        String      @db.VarChar(255)
  artists                         artists[]
  bookings_bookings_userIdTousers bookings[]  @relation("bookings_userIdTousers")
  favorites                       favorites[]
  reviews                         reviews[]
  savedar                         savedar[]
}

model appointmentslots {
  slotId   Int        @id @default(autoincrement())
  artistId Int
  dateTime DateTime   @db.DateTime(0)
  duration Int
  isBooked Boolean?   @default(false)
  users    artists    @relation(fields: [artistId], references: [artistId], onDelete: NoAction, onUpdate: NoAction, map: "appointmentslots_ibfk_1")
  bookings bookings[]

  @@unique([artistId, dateTime], map: "artistId")
}

model favorites {
  favId    Int     @id @default(autoincrement())
  userId   Int
  tattooId Int
  users    users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "favorites_ibfk_1")
  tattoos  tattoos @relation(fields: [tattooId], references: [tattooId], onDelete: NoAction, onUpdate: NoAction, map: "favorites_ibfk_2")

  @@unique([userId, tattooId], map: "userId")
  @@index([tattooId], map: "tattooId")
}

model savedar {
  savedId  Int    @id @default(autoincrement())
  userId   Int
  imageURL String @db.VarChar(255)
  users    users  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "savedar_ibfk_1")

  @@unique([userId, imageURL], map: "userId")
}

model artists {
  artistId                          Int                @id @default(autoincrement())
  userId                            Int
  cityId                            Int?
  artistDescription                 String?            @db.Text
  streetAddress                     String?            @db.VarChar(255)
  instagramLink                     String?            @db.VarChar(255)
  portfolioLink                     String?            @db.VarChar(255)
  membershipFee                     Decimal?           @db.Decimal(10, 2)
  imageURL                          String?            @db.VarChar(255)
  createdAt                         DateTime?          @default(now()) @db.DateTime(0)
  appointmentslots                  appointmentslots[]
  users                             users              @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "artists_ibfk_1")
  cities                            cities?            @relation(fields: [cityId], references: [cityId], onDelete: NoAction, onUpdate: NoAction, map: "artists_ibfk_2")
  artiststyles                      artiststyles[]
  bookings_bookings_artistIdTousers bookings[]         @relation("bookings_artistIdTousers")
  tattoos                           tattoos[]

  @@index([cityId], map: "cityId")
  @@index([userId], map: "userId")
}

model placements {
  placementId Int        @id @default(autoincrement())
  placement   String     @db.VarChar(100)
  bookings    bookings[]
}

model tattoostyles {
  id       Int     @id @default(autoincrement())
  tattooId Int
  styleId  Int
  tattoos  tattoos @relation(fields: [tattooId], references: [tattooId], onDelete: NoAction, onUpdate: NoAction, map: "tattoostyles_ibfk_1")
  styles   styles  @relation(fields: [styleId], references: [styleId], onDelete: NoAction, onUpdate: NoAction, map: "tattoostyles_ibfk_2")

  @@index([styleId], map: "styleId")
  @@index([tattooId], map: "tattooId")
}

model sizes {
  sizeId   Int        @id @default(autoincrement())
  size     String     @db.VarChar(50)
  bookings bookings[]
}
